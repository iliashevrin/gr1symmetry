INFO {
  TITLE:       "Lift controller"
  DESCRIPTION: "Lift controller spec inspired by the spec from the paper
                'Synthesis of Reactive (1) Designs'
                by Bloem, Jobstmann, Piterman, Pnueli, Sa'ar.
                The lift controller serves n floor.
                Its outputs are f in {0...n-1} indicating which floor it is currently in,
                and `serve` meaning stop and serve the floor.
                Its inputs are b[i] for i in {0...n-1} indicating
                whether the request button on floor i is pressed.
                The lift has to serve every requesting floor, and has to respect the rule of physics
                and move from floor f to f+1 or f-1 (so jumping floors is not allowed).
                (The original specification does not have the `serve` output.)
                This lift ignores the wishes of people entering it.
                Encoded by Ayrat Khalimov."
  SEMANTICS:   Mealy
  TARGET:      Mealy
}

GLOBAL {
  PARAMETERS {
n = 3;
  }
  DEFINITIONS {
    // (this code is taken from other specs)
    value(bus,v) = value'(bus,v,0,SIZEOF bus);
    value'(bus,v,i,j) =
      i >= j        : true
      bit(v,i) == 1 : value'(bus,v,i + 1,j) &&  bus[i]
      otherwise     : value'(bus,v,i + 1,j) && !bus[i];
    bit(v,i) =
      i <= 0     : v % 2
      otherwise  : bit(v / 2,i - 1);
    log2_dn(x) =
      x <= 1    : 0
      otherwise : 1 + log2_dn(x/2);
    nbits(x) =
      x == 0    : 0
      otherwise : 1 + log2_dn(x-1);
  }
}

MAIN {
  INPUTS {
    b[n];
  }

  OUTPUTS {
    up;          // the lift is moving up
    down;        // the lift is moving down
    serve;       // serve the floor (open the door, etc.)
    f[nbits(n)]; // the current floor
  }

  ASSUMPTIONS {
    // initially no buttons are pressed
    &&[0 <= i < n]  !b[i];

    // the button remains pressed until gets served
    &&[0 <= i < n]
      G (b[i] && !(value(f,i) && serve)  ->  X b[i]);

    // the button is lowered when served
    &&[0 <= i < n]
      G (b[i] && (value(f,i) && serve)  ->  X !b[i]);
  }

  INVARIANTS {
    // if the lift moves up, raise the signal `up`
    &&[0 <= i < n-1]
      ((value(f,i) && X value(f,i+1)) <-> up);  // (this is also wrong)
    // the same for `down`
    &&[0 < i < n]
      ((value(f,i) && X value(f,i-1)) <-> down);  // (this is also wrong)

    !(up && down); // (implied by above)

    ///// THE MAIN BUG IS HERE:
    // the laws of lift physics
    &&[0 <= i < n-1]
      (value(f,i) -> X(value(f,i) || value(f,i+1)));
    &&[0 < i < n]
      (value(f,i) -> X(value(f,i) || value(f,i-1)));
  }

  GUARANTEES {
    // the lift starts at floor 0
    value(f,0);

    // every request is served
    &&[0 <= i < n]
      G(b[i] -> F (value(f,i) && serve));

    // don't move up unless there is a request upwards
    &&[0 <= i < n-1]
      G(value(f,i) && up -> ||[i<j<n] b[j]);

    // don't move down unless there is a request downwards or there are no requests at all
    &&[0 < i < n]
      G(value(f,i) && down
          ->
          (
            (||[0<=j<i]  b[j]) // there is a request downwards
            ||
            (&&[0<=j<n] !b[j]) // there are no requests at all
          )
       );

    // if no requests, move to floor 0
    ! F G( (&&[0<=i<n] !b[i]) && !value(f,0) );
  }
}


//#!SYNTCOMP
//STATUS : unrealizable
//REF_SIZE : -1
//#.//#!SYNTCOMP
//STATUS : unknown
//REF_SIZE : 0
//#

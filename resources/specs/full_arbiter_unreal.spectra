import "DwyerPatterns.spectra"

module Full_arbiter_unreal

define N := $PARAM$;
define IND := N - 1;

env boolean[N] request;
sys boolean[N] grant;

sys {S0, S1}[N] releaseState;
sys {S0, S1, S2, S3}[N] spuriousState;


aux boolean[N] prev_request;
gar G forall i in Int(0..IND) . request[i] <-> next(prev_request[i]); 
gar unreal: G forall i in Int(0..IND) . forall j in Int(0..IND) . (request[j] & prev_request[i]) -> next(grant[i] & grant[j]); 


gar response{Int(0..IND) i}: S_responds_to_P_globally(grant[i], request[i]);

gar mutex: G forall i in Int(0..IND) . forall j in Int(0..IND) . (i != j) -> !(grant[i] & grant[j]);

		
gar forall i in Int(0..IND) . releaseState[i] = S0;
	
gar G forall i in Int(0..IND) . releaseState[i] = S0 -> !grant[i];
	
gar G forall i in Int(0..IND) . (releaseState[i] = S0 & !request[i]) -> next(releaseState[i] = S0);
	
gar G forall i in Int(0..IND) . (releaseState[i] = S0 & request[i]) -> next(releaseState[i] = S1);
	
gar G forall i in Int(0..IND) . releaseState[i] = S1 -> next(releaseState[i] = S1);


gar forall i in Int(0..IND) . spuriousState[i] = S0;
  	
gar G forall i in Int(0..IND) . (grant[i] & request[i]) -> next (spuriousState[i]=S1) ;
  
gar G forall i in Int(0..IND) . spuriousState[i] = S3 -> !grant[i];
  
gar G forall i in Int(0..IND) . (grant[i] & !request[i]) -> next (spuriousState[i]=S2) ;
  
gar G forall i in Int(0..IND) . (!grant[i] & !request[i] & spuriousState[i] != S0) -> next (spuriousState[i]=S3) ;
  
gar G forall i in Int(0..IND) . (spuriousState[i] = S0 & !grant[i]) -> next (spuriousState[i]=S0) ;
  
gar G forall i in Int(0..IND) . (!grant[i] & request[i]) -> next (spuriousState[i]=S0) ;
  	
gar no_spurious{Int(0..IND) i}: GF (spuriousState[i] = S0 | spuriousState[i] = S1 | spuriousState[i] = S3);



@symmetry {
	arrays: request, grant, releaseState, spuriousState, prev_request;
	indexes: 0..IND;
}
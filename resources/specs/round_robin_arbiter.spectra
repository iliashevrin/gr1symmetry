import "DwyerPatterns.spectra"

module Prioritized_arbiter

define N := $PARAM$;
define IND := N - 1;

env boolean[N] request;
sys boolean[N] grant;

asm G forall i in Int(0..IND) . (request[i] & !grant[i]) -> next(request[i]);

asm G forall i in Int(0..IND) . (!request[i] & grant[i]) -> next(!request[i]);

asm fairness{Int(0..IND) i}: GF !(request[i] & grant[i]);

gar response{Int(0..IND) i}: S_responds_to_P_globally(grant[i], request[i]);

gar mutex: G forall i in Int(0..IND) . forall j in Int(0..IND) . (i != j) -> !(grant[i] & grant[j]);


@symmetry {
	arrays: request, grant;
	indexes: 0..IND;
}

import "DwyerPatterns.spectra"

spec Variant_2

define DX := 4;
define DY := 4;

type DimX = Int(0..DX);
type DimY = Int(0..DY);

env DimX A_X;
env DimY A_Y;
env DimX B_X;
env DimY B_Y;
env DimX C_X;
env DimY C_Y;

sys DimX robotX;
sys DimY robotY;
sys {RED, GREEN}origin_color;
sys {UP, DOWN, LEFT, RIGHT}move;
sys boolean A_visited;
sys boolean B_visited;
sys boolean C_visited;
sys {A, B, C, D}first_visited;
sys {A, B, C, D}second_visited;
sys Int(0..3) count;

/*Our specification doesn't predetermine an order of visit (said A -> B -> C) but gives the robot (i.e. the system) the
 * freedom to pick their order at first and sticking to it after picked. This way, some edge cases based on the locations
 * of the targets can be avoided (though not all of them - see lines 48 - 50)*/

predicate avoid_obstacles (DimX x, DimY y): 
	(!((x = 0) & (y = 3)) & !((x = 1) & (y = 1)) & !((x = 2) & (y = 1)) & !((x = 3) & (y = 3)) & !((x = 3) & (y = 4)));
predicate not_Equal(DimX first_x , DimY first_y, DimX second_x , DimY second_y): (!(first_x = second_x & first_y = second_y)) ;
predicate fix (DimX x, DimY y):
	next (x) = x & next (y) = y;
predicate target_not_in(DimX x, DimY y):
	!(A_X = x & A_Y = y) & !(B_X = x & B_Y = y) & !(C_X = x & C_Y = y);
define at_A := ((robotX = A_X) & (robotY = A_Y));
define at_B := ((robotX = B_X) & (robotY = B_Y));
define at_C := ((robotX = C_X) & (robotY = C_Y));
define at_Origin := ((robotX = 0) & (robotY = 0));

/*Making sure the targets are in different locations*/
asm alw not_Equal (A_X, A_Y , B_X, B_Y) & not_Equal (A_X, A_Y , C_X, C_Y) & not_Equal (C_X, C_Y , B_X, B_Y) ;

/*As targets in these locations might cause the specification to be unrealizable, we chose to avoid them.
 * For example: if one target is in (0,4) and another is in (1,4) or one target is in (4,4) and another is in (4,2)*/
asm alw target_not_in (4, 4) & target_not_in (4, 3) & target_not_in (0, 4) ;

/*Making sure the targets are not in the obstacles and not in the origin*/
asm alw avoid_obstacles (A_X, A_Y) & !((A_X = 0) & (A_Y = 0)) & avoid_obstacles (B_X, B_Y) & !((B_X = 0) & (B_Y = 0)) & avoid_obstacles (C_X, C_Y) & !((C_X = 0) & (C_Y = 0));

/*Making sure targets don't change their place*/
asm alw fix (A_X, A_Y) & fix (B_X, B_Y) & fix (C_X, C_Y) ;

/*Assuming robot starts at origin*/
gar ini at_Origin;

/*Initializing counter to zero*/
gar ini count = 0;

/*None of the targets is marked as visited and the origin color is red in the beginning as required*/
gar ini (A_visited = false) & (B_visited = false) & (C_visited = false) & (first_visited = D) & (second_visited = D);

/*Setting an order of travel*/
gar alw (at_A & count = 0) implies (first_visited = D) & (second_visited = D) & (A_visited = false) & (next (A_visited) = true) & (next (count) = 1) & (next (first_visited) = A) & (next (second_visited) = D) & (next (B_visited) = B_visited) & (next (C_visited) = C_visited) /*& (next (origin_color) = GREEN)*/;
gar alw (at_B & count = 0) implies (first_visited = D) & (second_visited = D) & (B_visited = false) & (next (B_visited) = true) & (next (count) = 1) & (next (first_visited) = B) & (next (second_visited) = D) & (next (A_visited) = A_visited) & (next (C_visited) = C_visited) /*& (next (origin_color) = GREEN)*/;
gar alw (at_C & count = 0) implies (first_visited = D) & (second_visited = D) & (C_visited = false) & (next (C_visited) = true) & (next (count) = 1) & (next (first_visited) = C) & (next (second_visited) = D) & (next (B_visited) = B_visited) & (next (A_visited) = A_visited) /*& (next (origin_color) = GREEN)*/;

gar alw (at_A & count = 1) implies (first_visited != D) & (second_visited = D) & (A_visited = false) & (next (A_visited) = true) & (next (count) = 2) & (next (first_visited) = first_visited) & (next (second_visited) = A) & (next (B_visited) = B_visited) & (next (C_visited) = C_visited) /*& (next (origin_color) = origin_color)*/;
gar alw (at_B & count = 1) implies (first_visited != D) & (second_visited = D) & (B_visited = false) & (next (B_visited) = true) & (next (count) = 2) & (next (first_visited) = first_visited) & (next (second_visited) = B) & (next (A_visited) = A_visited) & (next (C_visited) = C_visited) /*& (next (origin_color) = origin_color)*/;
gar alw (at_C & count = 1) implies (first_visited != D) & (second_visited = D) & (C_visited = false) & (next (C_visited) = true) & (next (count) = 2) & (next (first_visited) = first_visited) & (next (second_visited) = C) & (next (B_visited) = B_visited) & (next (A_visited) = A_visited) /*& (next (origin_color) = origin_color)*/;

gar alw (at_A & count = 2) implies (first_visited != D) & (second_visited != D) & (A_visited = false) & (next (count) = 3) & (next (A_visited) = false) & (next (B_visited) = false) & (next (C_visited) = false) & (next (first_visited) = first_visited) & (next (second_visited) = second_visited) /*& (next (origin_color) = RED)*/;
gar alw (at_B & count = 2) implies (first_visited != D) & (second_visited != D) & (B_visited = false) & (next (count) = 3) & (next (A_visited) = false) & (next (B_visited) = false) & (next (C_visited) = false) & (next (first_visited) = first_visited) & (next (second_visited) = second_visited) /*& (next (origin_color) = RED)*/;
gar alw (at_C & count = 2) implies (first_visited != D) & (second_visited != D) & (C_visited = false) & (next (count) = 3) & (next (A_visited) = false) & (next (B_visited) = false) & (next (C_visited) = false) & (next (first_visited) = first_visited) & (next (second_visited) = second_visited) /*& (next (origin_color) = RED)*/;

/*if A -> B -> C, guaranteeing order is preserved*/
gar alw (first_visited = A & second_visited = B & count = 3) implies ((at_A & count = 3) implies (A_visited = false) & (B_visited = false) & (next (A_visited) = true)) /*& (next (origin_color) = GREEN)*/; 
gar alw (first_visited = A & second_visited = B & count = 3) implies ((at_B & count = 3) implies (A_visited = true) & (B_visited = false) & (next (B_visited) = true)) /*& (next (origin_color) = origin_color)*/; 
gar alw (first_visited = A & second_visited = B & count = 3) implies ((at_C & count = 3) implies (A_visited = true) & (B_visited = true) & (next (A_visited) = false) & (next (B_visited) = false)) /*& (next (origin_color) = RED)*/; 
gar alw (first_visited = A & second_visited = B & count = 3) implies ((!at_A & !at_C & count = 3) implies next (A_visited) = A_visited);
gar alw (first_visited = A & second_visited = B & count = 3) implies ((!at_B & !at_C & count = 3) implies next (B_visited) = B_visited);
gar alw (first_visited = A & second_visited = B & count = 3) implies next (C_visited) = C_visited;


/*if A -> C -> B, guaranteeing order is preserved*/
gar alw (first_visited = A & second_visited = C & count = 3) implies ((at_A & count = 3) implies (A_visited = false) & (C_visited = false) & (next (A_visited) = true)) /*& (next (origin_color) = GREEN)*/; 
gar alw (first_visited = A & second_visited = C & count = 3) implies ((at_C & count = 3) implies (A_visited = true) & (C_visited = false) & (next (C_visited) = true)) /*& (next (origin_color) = origin_color)*/; 
gar alw (first_visited = A & second_visited = C & count = 3) implies ((at_B & count = 3) implies (A_visited = true) & (C_visited = true) & (next (A_visited) = false) & (next (C_visited) = false)) /*& (next (origin_color) = RED)*/; 
gar alw (first_visited = A & second_visited = C & count = 3) implies ((!at_A & !at_B & count = 3) implies next (A_visited) = A_visited);
gar alw (first_visited = A & second_visited = C & count = 3) implies ((!at_C & !at_B & count = 3) implies next (C_visited) = C_visited);
gar alw (first_visited = A & second_visited = C & count = 3) implies next (B_visited) = B_visited;


/*if B -> A -> C, guaranteeing order is preserved*/
gar alw (first_visited = B & second_visited = A & count = 3) implies ((at_B & count = 3) implies (B_visited = false) & (A_visited = false) & (next (B_visited) = true)); 
gar alw (first_visited = B & second_visited = A & count = 3) implies ((at_A & count = 3) implies (B_visited = true) & (A_visited = false) & (next (A_visited) = true)); 
gar alw (first_visited = B & second_visited = A & count = 3) implies ((at_C & count = 3) implies (B_visited = true) & (A_visited = true) & (next (B_visited) = false) & (next (A_visited) = false)); 
gar alw (first_visited = B & second_visited = A & count = 3) implies ((!at_B & !at_C & count = 3) implies next (B_visited) = B_visited);
gar alw (first_visited = B & second_visited = A & count = 3) implies ((!at_A & !at_C & count = 3) implies next (A_visited) = A_visited);
gar alw (first_visited = B & second_visited = A & count = 3) implies next (C_visited) = C_visited;


/*if B -> C -> A, guaranteeing order is preserved*/
gar alw (first_visited = B & second_visited = C & count = 3) implies ((at_B & count = 3) implies (B_visited = false) & (C_visited = false) & (next (B_visited) = true)); 
gar alw (first_visited = B & second_visited = C & count = 3) implies ((at_C & count = 3) implies (B_visited = true) & (C_visited = false) & (next (C_visited) = true)); 
gar alw (first_visited = B & second_visited = C & count = 3) implies ((at_A & count = 3) implies (B_visited = true) & (C_visited = true) & (next (B_visited) = false) & (next (C_visited) = false)); 
gar alw (first_visited = B & second_visited = C & count = 3) implies ((!at_B & !at_A & count = 3) implies next (B_visited) = B_visited);
gar alw (first_visited = B & second_visited = C & count = 3) implies ((!at_C & !at_A & count = 3) implies next (C_visited) = C_visited);
gar alw (first_visited = B & second_visited = C & count = 3) implies next (A_visited) = A_visited;


/*if C -> A -> B, guaranteeing order is preserved*/
gar alw (first_visited = C & second_visited = A & count = 3) implies ((at_C & count = 3) implies (C_visited = false) & (A_visited = false) & (next (C_visited) = true)); 
gar alw (first_visited = C & second_visited = A & count = 3) implies ((at_A & count = 3) implies (C_visited = true) & (A_visited = false) & (next (A_visited) = true)); 
gar alw (first_visited = C & second_visited = A & count = 3) implies ((at_B & count = 3) implies (C_visited = true) & (A_visited = true) & (next (C_visited) = false) & (next (A_visited) = false)); 
gar alw (first_visited = C & second_visited = A & count = 3) implies ((!at_C & !at_B & count = 3) implies next (C_visited) = C_visited);
gar alw (first_visited = C & second_visited = A & count = 3) implies ((!at_A & !at_B & count = 3) implies next (A_visited) = A_visited);
gar alw (first_visited = C & second_visited = A & count = 3) implies next (B_visited) = B_visited;


/*if C -> B -> A, guaranteeing order is preserved*/
gar alw (first_visited = C & second_visited = B & count = 3) implies ((at_C & count = 3) implies (C_visited = false) & (B_visited = false) & (next (C_visited) = true)); 
gar alw (first_visited = C & second_visited = B & count = 3) implies ((at_B & count = 3) implies (C_visited = true) & (B_visited = false) & (next (B_visited) = true)); 
gar alw (first_visited = C & second_visited = B & count = 3) implies ((at_A & count = 3) implies (C_visited = true) & (B_visited = true) & (next (C_visited) = false) & (next (B_visited) = false)); 
gar alw (first_visited = C & second_visited = B & count = 3) implies ((!at_C & !at_A & count = 3) implies next (C_visited) = C_visited);
gar alw (first_visited = C & second_visited = B & count = 3) implies ((!at_B & !at_A & count = 3) implies next (B_visited) = B_visited);
gar alw (first_visited = C & second_visited = B & count = 3) implies next (A_visited) = A_visited;


/*Variables don't change unless they are supposed to*/
gar alw (!at_A & !at_B & !at_C) implies (next (count) = count);
gar alw (count = 3) implies next (count) = 3;
gar alw (!at_A & !at_B & !at_C) implies (next (first_visited) = first_visited) & (next (second_visited) = second_visited);
gar alw (count = 3) implies (next (first_visited) = first_visited) & (next (second_visited) = second_visited);
gar alw (!at_A & !at_B & !at_C) implies next (A_visited) = A_visited;
gar alw (!at_A & !at_B & !at_C) implies next (B_visited) = B_visited;
gar alw (!at_A & !at_B & !at_C) implies next (C_visited) = C_visited;

//Origin color is red only before the first target is visited
gar alw (origin_color = RED) iff (A_visited = false & B_visited = false & C_visited = false);


/*Defining moves*/
gar alw move = UP iff (next (robotY) = robotY - 1) & (next (robotX) = robotX);
gar alw move = DOWN iff (next (robotY) = robotY + 1) & (next (robotX) = robotX);
gar alw move = LEFT iff (next (robotX) = robotX - 1) & (next (robotY) = robotY);
gar alw move = RIGHT iff (next (robotX) = robotX + 1) & (next (robotY) = robotY);

/*Guaranteeing all targets are visited*/
gar alwEv at_A;
gar alwEv at_B;
gar alwEv at_C;

/*Guaranteeing robot doesn't visit obstacles*/
gar alw avoid_obstacles (robotX, robotY) ;

/*Guaranteeing no illegal moves are made*/
gar alw (robotX = 0 implies move != LEFT) & (robotX = DX implies move != RIGHT) & (robotY = 0 implies move != UP) & (robotY = DY implies move != DOWN);

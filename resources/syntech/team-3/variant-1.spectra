import "DwyerPatterns.spectra"

spec Variant_1

define DX := 4;
define DY := 4;

type DimX = Int(0..DX);
type DimY = Int(0..DY);

env DimX A_X;
env DimY A_Y;
env DimX B_X;
env DimY B_Y;
env DimX C_X;
env DimY C_Y;

sys DimX robotX;
sys DimY robotY;
sys {UP, DOWN, LEFT, RIGHT}move;

predicate avoid_obstacles (DimX x, DimY y): 
	(!((x = 0) & (y = 3)) & !((x = 1) & (y = 1)) & !((x = 2) & (y = 1)) & !((x = 3) & (y = 3)) & !((x = 3) & (y = 4)));
predicate not_Equal(DimX first_x , DimY first_y, DimX second_x , DimY second_y): (!(first_x = second_x & first_y = second_y)) ;
predicate fix (DimX x, DimY y):
	next (x) = x & next (y) = y;	

define at_A := ((robotX = A_X) & (robotY = A_Y));
define at_B := ((robotX = B_X) & (robotY = B_Y));
define at_C := ((robotX = C_X) & (robotY = C_Y));
define at_Origin := ((robotX = 0) & (robotY = 0));

/*Making sure the targets are in different locations*/
asm alw not_Equal (A_X, A_Y , B_X, B_Y) & not_Equal (A_X, A_Y , C_X, C_Y) & not_Equal (C_X, C_Y , B_X, B_Y) ;

/*Making sure the targets are not in the obstacles and not in the origin*/
asm alw avoid_obstacles (A_X, A_Y) & !((A_X = 0) & (A_Y = 0)) & avoid_obstacles (B_X, B_Y) & !((B_X = 0) & (B_Y = 0)) & avoid_obstacles (C_X, C_Y) & !((C_X = 0) & (C_Y = 0));

/*Making sure targets don't change their place*/
asm alw fix (A_X, A_Y) & fix (B_X, B_Y) & fix (C_X, C_Y) ;
 
/*Defining moves*/
gar alw move = UP implies (next (robotY) = robotY - 1) & (next (robotX) = robotX);
gar alw move = DOWN implies (next (robotY) = robotY + 1) & (next (robotX) = robotX);
gar alw move = LEFT implies (next (robotX) = robotX - 1) & (next (robotY) = robotY);
gar alw move = RIGHT implies (next (robotX) = robotX + 1) & (next (robotY) = robotY);

/*Guaranteeing all targets are visited*/
gar alwEv at_A;
gar alwEv at_B;
gar alwEv at_C;
gar alwEv at_Origin;

/*Guaranteeing robot starts at the origin*/
gar ini at_Origin;

/*Guaranteeing robot doesn't visit obstacles*/
gar alw avoid_obstacles (robotX, robotY) ;

/*Guaranteeing no illegal moves are made*/
gar alw (robotX = 0 implies move != LEFT) & (robotX = DX implies move != RIGHT) & (robotY = 0 implies move != UP) & (robotY = DY implies move != DOWN);

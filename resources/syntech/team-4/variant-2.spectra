import "DwyerPatterns.spectra"
spec Robot

//~~~~~~~~~~~ TYPES ~~~~~~~~~~~~~~

define DX := 4;
define DY := 4;

type DimX = Int(0..DX);
type DimY = Int(0..DY);


//~~~~~~~~ CORE OBJECTS ~~~~~~~~~~

sys DimX robotX;	// X position of the robot from 0 to 4
sys DimY robotY;	// Y position of the robot from 0 to 4

env DimX targetA_X;
env DimY targetA_Y;
env DimX targetB_X;
env DimY targetB_Y;
env DimX targetC_X;
env DimY targetC_Y;


// noted locations: start point and target points
define 
	atStart := (robotX = 0) & (robotY = 0);
	atTargetA := (robotX = targetA_X) & (robotY = targetA_Y);
	atTargetB := (robotX = targetB_X) & (robotY = targetB_Y);
	atTargetC := (robotX = targetC_X) & (robotY = targetC_Y);
	
	
//~~~~~~~~~ PREDICATES ~~~~~~~~~~

// moving x coordinate predicate
predicate moveDistX(DimX Xpos):
	(next(Xpos) = Xpos) | (next(Xpos) = Xpos +1) | (next(Xpos) = Xpos -1); 

// moving y coordinate predicate
predicate moveDistY(DimY Ypos):
	(next(Ypos) = Ypos) | (next(Ypos) = Ypos +1) | (next(Ypos) = Ypos -1); 

// facilitate robot moves predicate
predicate robotMoves(DimX Xpos, DimY Ypos):
 	moveDistX(Xpos) & moveDistY(Ypos);

// check 2 core objects share the same location
predicate intersecting(DimX Xpos1, DimY Ypos1, DimX Xpos2, DimY Ypos2):
	((Xpos1 = Xpos2) & (Ypos1 = Ypos2));

// avoid hard-coded obstacles
predicate avoidsObstacles(DimX Xpos, DimY Ypos):
	!intersecting(Xpos, Ypos, 0, 3) &
	!intersecting(Xpos, Ypos, 1, 1) &
	!intersecting(Xpos, Ypos, 2, 1) &
	!intersecting(Xpos, Ypos, 3, 3) &
	!intersecting(Xpos, Ypos, 3, 4)
	;

// stay in board limits -> between 0 and 8 for x and y
predicate staysInBoardLimits(DimX Xpos, DimY Ypos):
	(Xpos >= 0) & (Xpos <= DX) & (Ypos >= 0) & (Ypos <= DY);

// fix location of core object
predicate isFixed(DimX Xpos, DimY Ypos):
	(next(Xpos) = Xpos) & (next(Ypos) = Ypos);
	
// given a cell in the board, check if all targets do not occupy it 
predicate targetsAvoidCell(DimX Xpos, DimY Ypos):
	!intersecting(targetA_X, targetA_Y, Xpos, Ypos) &
	!intersecting(targetB_X, targetB_Y, Xpos, Ypos) &
	!intersecting(targetC_X, targetC_Y, Xpos, Ypos);


//~~~~~~~~~ ASSUMPTIONS ~~~~~~~~~~

// spectra assumes targets are not moving
asm targetsAreFixed:
	alw isFixed(targetA_X, targetA_Y) &
		isFixed(targetB_X, targetB_Y) &
		isFixed(targetC_X, targetC_Y);

// spectra assumes targets do not share location with obstacles
asm targetsDoNotIntersectObstacles:
	alw avoidsObstacles(targetA_X, targetA_Y) &
		avoidsObstacles(targetB_X, targetB_Y) &
		avoidsObstacles(targetC_X, targetC_Y);

// spectra assumes targets do not share location with each other
asm targetsDoNotIntersectEachOther:
	alw !intersecting(targetA_X, targetA_Y, targetB_X, targetB_Y) &
		!intersecting(targetA_X, targetA_Y, targetC_X, targetC_Y) &
		!intersecting(targetB_X, targetB_Y, targetC_X, targetC_Y);

// spectra assumes targets are not positioned on starting location 
asm targetsDoNotIntersectStart:
	alw targetsAvoidCell(0, 0);

// temporary fix for blocking scenarios preventing the robot from being able to adhere to the order (A->B->C).
asm targetsDoNotFormBlockingScenarios:
	alw (!targetsAvoidCell(4, 4) -> targetsAvoidCell(4, 3)) &
		(!targetsAvoidCell(4, 3) -> targetsAvoidCell(4, 4)) &
		(
			!targetsAvoidCell(0, 4) 
			-> 
			(targetsAvoidCell(1, 4) | targetsAvoidCell(1, 3))
		) &
		(
			!targetsAvoidCell(1, 4) 
			-> 
			(targetsAvoidCell(0, 4) | targetsAvoidCell(1, 3))
		) &
		(
			!targetsAvoidCell(1, 3) 
			-> 
			(targetsAvoidCell(0, 4) | targetsAvoidCell(1, 4))
		);

//~~~~~~~~~ GUARANTEES ~~~~~~~~~~~

// spectra guarantees robot initial position is top-left cell
gar ini atStart;

// spectra guarantees robot always moves, does not step on obstacles, & stays on board
gar	robotBehaves: 
	alw robotMoves(robotX, robotY) & 
		avoidsObstacles(robotX, robotY) &
		staysInBoardLimits(robotX, robotY);

// spectra guarantees all targets are eventually visited
gar alwEv atTargetA;
gar alwEv atTargetB;
gar alwEv atTargetC;

// after visiting once targetA, robot must adhere to the order (A->B->C).
// we enforce the order only after the first time the robot visited the first sampled target.
// See commit 5a43ebe7ba0aaf550eb81c60e54994405fb54d78 and further explanation on slack to understand why.
gar P_becomes_true_after_Q_until_R(atTargetB, ONCE(atTargetA) & atTargetA, ONCE(atTargetA) & atTargetC);
gar P_becomes_true_after_Q_until_R(atTargetC, ONCE(atTargetA) & atTargetB, ONCE(atTargetA) & atTargetA);
gar P_becomes_true_after_Q_until_R(atTargetA, ONCE(atTargetA) & atTargetC, ONCE(atTargetA) & atTargetB);

// preventing the robot from returning to a target it just visited
gar P_is_false_after_Q_until_R(atTargetA, PREV(atTargetA), atTargetC);
gar P_is_false_after_Q_until_R(atTargetB, PREV(atTargetB), atTargetA);
gar P_is_false_after_Q_until_R(atTargetC, PREV(atTargetC), atTargetB);

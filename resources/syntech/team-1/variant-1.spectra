import "DwyerPatterns.spectra"

spec Variant1

define DX := 4;
define DY := 4;

type DimX = Int(0..DX);
type DimY = Int(0..DY);

define
		obs1 := robotX = 0 and robotY = 3;
		obs2 := robotX = 1 and robotY = 1;
		obs3 := robotX = 2 and robotY = 1;
		obs4 := robotX = 3 and robotY = 3;
		obs5 := robotX = 3 and robotY = 4;

define
		start := robotX = 0 and robotY  = 0;
		atTarget := atTargetA or atTargetB or atTargetC;
		atTargetA := robotX = targetA[0]  and robotY  = targetA[1];
		atTargetB := robotX = targetB[0]  and robotY  = targetB[1];
		atTargetC := robotX = targetC[0]  and robotY  = targetC[1];
				
sys DimX robotX;
sys DimY robotY;

env Int(0..DX)[2] targetA;
env Int(0..DX)[2] targetB;
env Int(0..DX)[2] targetC;

//targets stay put after being set
asm alw !start -> next(targetA[0]) = targetA[0] and next(targetA[1]) = targetA[1];
asm alw !start -> next(targetB[0]) = targetB[0] and next(targetB[1]) = targetB[1];
asm alw !start ->next(targetC[0]) = targetC[0] and next(targetC[1]) = targetC[1];

//targets are not on obstacles
asm alw (targetA[0] = 0 -> targetA[1] != 3) and
		(targetA[0] = 1 -> targetA[1] != 1) and
		(targetA[0] = 2 -> targetA[1] != 1) and
		(targetA[0] = 3 -> targetA[1] != 3) and
		(targetA[0] = 3 -> targetA[1] != 4);
asm alw (targetB[0] = 0 -> targetB[1] != 3) and
		(targetB[0] = 1 -> targetB[1] != 1) and
		(targetB[0] = 2 -> targetB[1] != 1) and
		(targetB[0] = 3 -> targetB[1] != 3) and
		(targetB[0] = 3 -> targetB[1] != 4);
asm alw (targetC[0] = 0 -> targetC[1] != 3) and
		(targetC[0] = 1 -> targetC[1] != 1) and
		(targetC[0] = 2 -> targetC[1] != 1) and
		(targetC[0] = 3 -> targetC[1] != 3) and
		(targetC[0] = 3 -> targetC[1] != 4);
		
//targets are not on start (0,0)
asm alw (targetA[0] = 0 -> targetA[1] != 0) and
		(targetB[0] = 0 -> targetB[1] != 0) and
		(targetC[0] = 0 -> targetC[1] != 0);

//the robot moves one step at a time
//we allow diagonal moves as well as up/down/left/right
gar alw (right(robotX) | left(robotX) | stayX(robotX)) and
		(up(robotY) | down(robotY) | stayY(robotY));

predicate right(DimX cord):
	next(cord) - cord = 1;
	
predicate left(DimX cord):
	next(cord) - cord = -1;
	
predicate stayX(DimX cord):
	next(cord) = cord;

predicate up(DimY cord):
	next(cord) - cord = 1;
	
predicate down(DimY cord):
	next(cord) - cord = -1;

predicate stayY(DimY cord):
	next(cord) = cord;


//the robot returns to start between targets
gar P_becomes_true_between_Q_and_R(start, atTarget, atTarget);

//robot visits targets fairly
gar alwEv atTargetA;
gar alwEv atTargetB;
gar alwEv atTargetC;


//the robot avoids obstacles
gar alw !obs1 and !obs2 and !obs3 and !obs4 and !obs5;

//robot starts at top left
gar ini start;


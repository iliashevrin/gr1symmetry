import "DwyerPatterns.spectra"

spec Variant_1

////////////////////////////////////////////////
/*
 * VARIABLES
 */
////////////////////////////////////////////////

//robot coordinates 
sys DimX robotX;
sys DimY robotY;

//target A coordinates
env DimX tar1X;
env DimY tar1Y;

//target B coordinates
env DimX tar2X;
env DimY tar2Y;

//target C coordinates
env DimX tar3X;
env DimY tar3Y;

////////////////////////////////////////////////
/*
 * DEFINES, TYPES AND PREDICATES
 */
////////////////////////////////////////////////

type DimX = Int(0..DX);
type DimY = Int(0..DY);

define DX := 4;
define DY := 4;

predicate moveDimX(DimX pos):
  pos+1 = next(pos) |
  pos   = next(pos) |
  pos-1 = next(pos);
  
predicate moveDimY(DimY pos):
  pos+1 = next(pos) |
  pos   = next(pos) |
  pos-1 = next(pos);
  
predicate robotAt(DimX x, DimY y):
	robotX=x & robotY=y;
	
predicate targetStays(DimX x, DimY y):
next(x)=x & next(y)=y;

predicate is_diff_point(DimX a, DimY b, DimX x, DimY y):
(a != x) | (b != y);

predicate target_not_obs(DimX tarX, DimY tarY):
	is_diff_point(tarX, tarY, 1, 1) & 
	is_diff_point(tarX, tarY, 2, 1) &
	is_diff_point(tarX, tarY, 0, 3) &
	is_diff_point(tarX, tarY, 3, 3) &
	is_diff_point(tarX, tarY, 3, 4);
	
// target defines
define atStart := robotX=0 & robotY=0;
define atTar1 := robotX=tar1X & robotY=tar1Y;
define atTar2 := robotX=tar2X & robotY=tar2Y;
define atTar3 := robotX=tar3X & robotY=tar3Y;

////////////////////////////////////////////////
/*
 * BASELINE GAR ABD ASM
 */
////////////////////////////////////////////////

// Robot starts at (0,0)
gar ini robotAt(0,0);

// Robot not at obstacles
gar alw !(robotAt(1, 1)); 
gar alw !(robotAt(2, 1));
gar alw !(robotAt(0, 3));
gar alw !(robotAt(3, 3));
gar alw !(robotAt(3, 4));

// Robot can move one step to any nearby cell on each step
gar alw moveDimX(robotX) & moveDimY(robotY); 

// Target not at obstacles
/*
asm alw target_not_obs(tar1X, tar1Y);
asm alw target_not_obs(tar2X, tar2Y);
asm alw target_not_obs(tar3X, tar3Y);
*/
// (0,0) is not a valid target
asm alw is_diff_point(tar1X, tar1Y, 0, 0);
asm alw is_diff_point(tar2X, tar2Y, 0, 0);
asm alw is_diff_point(tar3X, tar3Y, 0, 0);
	        
// Targets are fixed throughout the run
asm alw targetStays(tar1X, tar1Y) & targetStays(tar2X, tar2Y) & targetStays(tar3X, tar3Y);


////////////////////////////////////////////////
/*
 * VARIANT - COME BACK TO 00 AND KEEP GOING TO TARGETS 
 */
////////////////////////////////////////////////

// Visit all target locations repeatedly, no target is neglected

gar alwEv atTar1;
gar alwEv atTar2;
gar alwEv atTar3;

// keep visiting (0,0) after visiting a target, the robot is allowed to visit another target on the way to (0,0) 
gar alwEv atStart;




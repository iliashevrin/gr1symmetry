import "DwyerPatterns.spectra"

spec Variant1

define NumObstacles := 5;
define DX := 4;
define DY := 4;

type DimX = Int(0..DX);
type DimY = Int(0..DY);
type Dim = Int(0..4);
 
sys DimX robotX;
sys DimY robotY;


/*
 * random environment variables that are fixed throughout the run
 */
env Dim[2] cellA;
env Dim[2] cellB;
env Dim[2] cellC;
 
/*
 * we'll define 'home' as "the robot is at (0,0)
 * same for each target
 */
define
	home := robotX = 0 & robotY =  0;
	atCellA := (robotX = cellA[0]) & (robotY = cellA[1]);
	atCellB := (robotX = cellB[0]) & (robotY = cellB[1]);
	atCellC := (robotX = cellC[0]) & (robotY = cellC[1]);
	

// targets are not on obstacles
predicate targetNotOnObstacleOrHome(Dim cellX, Dim cellY):
	(!(cellX = 0 & cellY = 0)) & (!(cellX = 0 & cellY = 3)) & (!(cellX = 1 & cellY = 1)) & (!(cellX = 2 & cellY = 1)) & (!(cellX = 3 & cellY = 3)) & (!(cellX = 3 & cellY = 4));

asm alw targetNotOnObstacleOrHome(cellA[0], cellA[1]);
asm alw targetNotOnObstacleOrHome(cellB[0], cellB[1]);
asm alw targetNotOnObstacleOrHome(cellC[0], cellC[1]);


// the robot does not step on obstacles
predicate robotNotOnObstacle(DimX robotX, DimY robotY):
	(!(robotX = 0 & robotY = 3)) & (!(robotX = 1 & robotY = 1)) & (!(robotX = 2 & robotY = 1)) & (!(robotX = 3 & robotY = 3)) & (!(robotX = 3 & robotY = 4));

gar alw robotNotOnObstacle(robotX, robotY);


// targets are in different locations
predicate targetsAreDifferent(Dim cell1X, Dim cell1Y, Dim cell2X, Dim cell2Y):
	!((cell1X = cell2X) & (cell1Y = cell2Y));

asm alw targetsAreDifferent(cellA[0], cellA[1], cellB[0], cellB[1]);
asm alw targetsAreDifferent(cellA[0], cellA[1], cellC[0], cellC[1]);
asm alw targetsAreDifferent(cellB[0], cellB[1], cellC[0], cellC[1]);


// targets do not move
asm alw cellA[0] = next(cellA[0]) & cellA[1] = next(cellA[1]);
asm alw cellB[0] = next(cellB[0]) & cellB[1] = next(cellB[1]);
asm alw cellC[0] = next(cellC[0]) & cellC[1] = next(cellC[1]);


// visit each target and home fairly
gar alwEv atCellA;
gar alwEv atCellB;
gar alwEv atCellC;
gar alwEv home;

// start at home
gar ini home;



/*
 * restrict the moves of the robot to go only to neighboring
 * squares
 */
gar robotMoves:
  alw moveDistX(robotX) & moveDistY(robotY); 

/**
 * make sure parameter changes by at most +/- one 
 * @param Dim pos
 */    
predicate moveDistX(DimX pos):
  pos+1 = next(pos) |
  pos   = next(pos) |
  pos-1 = next(pos);  

predicate moveDistY(DimY pos):
  pos+1 = next(pos) |
  pos   = next(pos) |
  pos-1 = next(pos);  
  
